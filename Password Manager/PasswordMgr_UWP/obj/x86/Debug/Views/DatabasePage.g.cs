#pragma checksum "C:\projects\Onionware-Password-Manager\Password Manager\PasswordMgr_UWP\Views\DatabasePage.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "7A03C21A635B880970A27AF82E32A57B91A6D276AD01DD8A8DF6C005A7E6EB64"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PasswordMgr_UWP.Views
{
    partial class DatabasePage : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_Controls_InfoBar_IsOpen(global::Microsoft.UI.Xaml.Controls.InfoBar obj, global::System.Boolean value)
            {
                obj.IsOpen = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBox_Text(global::Windows.UI.Xaml.Controls.TextBox obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBox_IsReadOnly(global::Windows.UI.Xaml.Controls.TextBox obj, global::System.Boolean value)
            {
                obj.IsReadOnly = value;
            }
            public static void Set_Windows_UI_Xaml_FrameworkElement_AllowFocusOnInteraction(global::Windows.UI.Xaml.FrameworkElement obj, global::System.Boolean value)
            {
                obj.AllowFocusOnInteraction = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_PasswordBox_Password(global::Windows.UI.Xaml.Controls.PasswordBox obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Password = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_PasswordBox_PasswordRevealMode(global::Windows.UI.Xaml.Controls.PasswordBox obj, global::Windows.UI.Xaml.Controls.PasswordRevealMode value)
            {
                obj.PasswordRevealMode = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton obj, global::System.Nullable<global::System.Boolean> value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Boolean) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Boolean), targetNullValue);
                }
                obj.IsChecked = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_CommandParameter(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.CommandParameter = value;
            }
            public static void Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_IsDoubleTapEnabled(global::Windows.UI.Xaml.UIElement obj, global::System.Boolean value)
            {
                obj.IsDoubleTapEnabled = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TreeView_ItemsSource(global::Windows.UI.Xaml.Controls.TreeView obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_TreeViewItem_IsExpanded(global::Windows.UI.Xaml.Controls.TreeViewItem obj, global::System.Boolean value)
            {
                obj.IsExpanded = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TreeViewItem_ItemsSource(global::Windows.UI.Xaml.Controls.TreeViewItem obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class DatabasePage_obj3_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IDatabasePage_Bindings
        {
            private global::PasswordMgr_UWP.Core.Models.EncryptedPassword dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj3;
            private global::Windows.UI.Xaml.Controls.TextBlock obj4;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj4TextDisabled = false;

            private DatabasePage_obj3_BindingsTracking bindingsTracking;

            public DatabasePage_obj3_Bindings()
            {
                this.bindingsTracking = new DatabasePage_obj3_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 38 && columnNumber == 32)
                {
                    isobj4TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3: // Views\DatabasePage.xaml line 35
                        this.obj3 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.TreeViewItem)target);
                        break;
                    case 4: // Views\DatabasePage.xaml line 38
                        this.obj4 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj3.Target as global::Windows.UI.Xaml.Controls.TreeViewItem).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::PasswordMgr_UWP.Core.Models.EncryptedPassword) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IDatabasePage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::PasswordMgr_UWP.Core.Models.EncryptedPassword)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::PasswordMgr_UWP.Core.Models.EncryptedPassword obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Name(obj.Name, phase);
                    }
                }
            }
            private void Update_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 38
                    if (!isobj4TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj4, obj, null);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class DatabasePage_obj3_BindingsTracking
            {
                private global::System.WeakReference<DatabasePage_obj3_Bindings> weakRefToBindingObj; 

                public DatabasePage_obj3_BindingsTracking(DatabasePage_obj3_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<DatabasePage_obj3_Bindings>(obj);
                }

                public DatabasePage_obj3_Bindings TryGetBindingObject()
                {
                    DatabasePage_obj3_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DatabasePage_obj3_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::PasswordMgr_UWP.Core.Models.EncryptedPassword obj = sender as global::PasswordMgr_UWP.Core.Models.EncryptedPassword;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Name(obj.Name, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Name":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Name(obj.Name, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::PasswordMgr_UWP.Core.Models.EncryptedPassword obj)
                {
                    DatabasePage_obj3_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class DatabasePage_obj6_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IDatabasePage_Bindings
        {
            private global::PasswordMgr_UWP.Core.Models.EncryptedDatabase dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj6;
            private global::Windows.UI.Xaml.Controls.FontIcon obj7;
            private global::Windows.UI.Xaml.Controls.FontIcon obj8;
            private global::Windows.UI.Xaml.Controls.TextBlock obj9;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj6IsExpandedDisabled = false;
            private static bool isobj6ItemsSourceDisabled = false;
            private static bool isobj7VisibilityDisabled = false;
            private static bool isobj8VisibilityDisabled = false;
            private static bool isobj9TextDisabled = false;

            private DatabasePage_obj6_BindingsTracking bindingsTracking;

            public DatabasePage_obj6_Bindings()
            {
                this.bindingsTracking = new DatabasePage_obj6_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 25 && columnNumber == 49)
                {
                    isobj6IsExpandedDisabled = true;
                }
                else if (lineNumber == 25 && columnNumber == 83)
                {
                    isobj6ItemsSourceDisabled = true;
                }
                else if (lineNumber == 27 && columnNumber == 100)
                {
                    isobj7VisibilityDisabled = true;
                }
                else if (lineNumber == 28 && columnNumber == 100)
                {
                    isobj8VisibilityDisabled = true;
                }
                else if (lineNumber == 29 && columnNumber == 32)
                {
                    isobj9TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 6: // Views\DatabasePage.xaml line 25
                        this.obj6 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.TreeViewItem)target);
                        break;
                    case 7: // Views\DatabasePage.xaml line 27
                        this.obj7 = (global::Windows.UI.Xaml.Controls.FontIcon)target;
                        break;
                    case 8: // Views\DatabasePage.xaml line 28
                        this.obj8 = (global::Windows.UI.Xaml.Controls.FontIcon)target;
                        break;
                    case 9: // Views\DatabasePage.xaml line 29
                        this.obj9 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj6.Target as global::Windows.UI.Xaml.Controls.TreeViewItem).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::PasswordMgr_UWP.Core.Models.EncryptedDatabase) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IDatabasePage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::PasswordMgr_UWP.Core.Models.EncryptedDatabase)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::PasswordMgr_UWP.Core.Models.EncryptedDatabase obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_IsDecrypted(obj.IsDecrypted, phase);
                        this.Update_Passwords(obj.Passwords, phase);
                        this.Update_IsEncrypted(obj.IsEncrypted, phase);
                        this.Update_Name(obj.Name, phase);
                    }
                }
            }
            private void Update_IsDecrypted(global::System.Boolean obj, int phase)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    this.Update_IsDecrypted_Cast_IsDecrypted_To_Visibility(obj ? global::Windows.UI.Xaml.Visibility.Visible : global::Windows.UI.Xaml.Visibility.Collapsed, phase);
                }
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 25
                    if (!isobj6IsExpandedDisabled)
                    {
                        if ((this.obj6.Target as global::Windows.UI.Xaml.Controls.TreeViewItem) != null)
                        {
                            XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TreeViewItem_IsExpanded((this.obj6.Target as global::Windows.UI.Xaml.Controls.TreeViewItem), obj);
                        }
                    }
                }
            }
            private void Update_Passwords(global::System.Collections.ObjectModel.ObservableCollection<global::PasswordMgr_UWP.Core.Models.EncryptedPassword> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Passwords(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 25
                    if (!isobj6ItemsSourceDisabled)
                    {
                        if ((this.obj6.Target as global::Windows.UI.Xaml.Controls.TreeViewItem) != null)
                        {
                            XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TreeViewItem_ItemsSource((this.obj6.Target as global::Windows.UI.Xaml.Controls.TreeViewItem), obj, null);
                        }
                    }
                }
            }
            private void Update_IsDecrypted_Cast_IsDecrypted_To_Visibility(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 27
                    if (!isobj7VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj7, obj);
                    }
                }
            }
            private void Update_IsEncrypted(global::System.Boolean obj, int phase)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    this.Update_IsEncrypted_Cast_IsEncrypted_To_Visibility(obj ? global::Windows.UI.Xaml.Visibility.Visible : global::Windows.UI.Xaml.Visibility.Collapsed, phase);
                }
            }
            private void Update_IsEncrypted_Cast_IsEncrypted_To_Visibility(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 28
                    if (!isobj8VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj8, obj);
                    }
                }
            }
            private void Update_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 29
                    if (!isobj9TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj9, obj, null);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class DatabasePage_obj6_BindingsTracking
            {
                private global::System.WeakReference<DatabasePage_obj6_Bindings> weakRefToBindingObj; 

                public DatabasePage_obj6_BindingsTracking(DatabasePage_obj6_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<DatabasePage_obj6_Bindings>(obj);
                }

                public DatabasePage_obj6_Bindings TryGetBindingObject()
                {
                    DatabasePage_obj6_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                    UpdateChildListeners_Passwords(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DatabasePage_obj6_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::PasswordMgr_UWP.Core.Models.EncryptedDatabase obj = sender as global::PasswordMgr_UWP.Core.Models.EncryptedDatabase;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_IsDecrypted(obj.IsDecrypted, DATA_CHANGED);
                                bindings.Update_Passwords(obj.Passwords, DATA_CHANGED);
                                bindings.Update_IsEncrypted(obj.IsEncrypted, DATA_CHANGED);
                                bindings.Update_Name(obj.Name, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "IsDecrypted":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_IsDecrypted(obj.IsDecrypted, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Passwords":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Passwords(obj.Passwords, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsEncrypted":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_IsEncrypted(obj.IsEncrypted, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Name":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Name(obj.Name, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::PasswordMgr_UWP.Core.Models.EncryptedDatabase obj)
                {
                    DatabasePage_obj6_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
                public void PropertyChanged_Passwords(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DatabasePage_obj6_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::PasswordMgr_UWP.Core.Models.EncryptedPassword> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::PasswordMgr_UWP.Core.Models.EncryptedPassword>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_Passwords(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    DatabasePage_obj6_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::PasswordMgr_UWP.Core.Models.EncryptedPassword> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::PasswordMgr_UWP.Core.Models.EncryptedPassword>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::PasswordMgr_UWP.Core.Models.EncryptedPassword> cache_Passwords = null;
                public void UpdateChildListeners_Passwords(global::System.Collections.ObjectModel.ObservableCollection<global::PasswordMgr_UWP.Core.Models.EncryptedPassword> obj)
                {
                    if (obj != cache_Passwords)
                    {
                        if (cache_Passwords != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Passwords).PropertyChanged -= PropertyChanged_Passwords;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_Passwords).CollectionChanged -= CollectionChanged_Passwords;
                            cache_Passwords = null;
                        }
                        if (obj != null)
                        {
                            cache_Passwords = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Passwords;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_Passwords;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class DatabasePage_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IDatabasePage_Bindings
        {
            private global::PasswordMgr_UWP.Views.DatabasePage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Microsoft.UI.Xaml.Controls.InfoBar obj16;
            private global::Windows.UI.Xaml.Controls.TextBox obj17;
            private global::Windows.UI.Xaml.Controls.TextBox obj18;
            private global::Windows.UI.Xaml.Controls.PasswordBox obj19;
            private global::Windows.UI.Xaml.Controls.Button obj20;
            private global::Windows.UI.Xaml.Controls.Primitives.ToggleButton obj21;
            private global::Windows.UI.Xaml.Controls.Button obj22;
            private global::Windows.UI.Xaml.Controls.Button obj24;
            private global::Windows.UI.Xaml.Controls.Button obj25;
            private global::Windows.UI.Xaml.Controls.Button obj26;
            private global::Windows.UI.Xaml.Controls.Button obj27;
            private global::Windows.UI.Xaml.Controls.Button obj28;
            private global::Windows.UI.Xaml.Controls.Button obj29;
            private global::Windows.UI.Xaml.Controls.Button obj30;
            private global::Windows.UI.Xaml.Controls.TreeView obj31;
            private global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj32;
            private global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj33;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj16IsOpenDisabled = false;
            private static bool isobj17TextDisabled = false;
            private static bool isobj17IsReadOnlyDisabled = false;
            private static bool isobj18TextDisabled = false;
            private static bool isobj18IsReadOnlyDisabled = false;
            private static bool isobj19PasswordDisabled = false;
            private static bool isobj19PasswordRevealModeDisabled = false;
            private static bool isobj19AllowFocusOnInteractionDisabled = false;
            private static bool isobj20VisibilityDisabled = false;
            private static bool isobj20IsEnabledDisabled = false;
            private static bool isobj20CommandDisabled = false;
            private static bool isobj21IsEnabledDisabled = false;
            private static bool isobj21IsCheckedDisabled = false;
            private static bool isobj22CommandDisabled = false;
            private static bool isobj22CommandParameterDisabled = false;
            private static bool isobj24CommandDisabled = false;
            private static bool isobj25CommandDisabled = false;
            private static bool isobj25IsEnabledDisabled = false;
            private static bool isobj26CommandDisabled = false;
            private static bool isobj26IsEnabledDisabled = false;
            private static bool isobj27CommandDisabled = false;
            private static bool isobj27IsEnabledDisabled = false;
            private static bool isobj28CommandDisabled = false;
            private static bool isobj28IsEnabledDisabled = false;
            private static bool isobj29CommandDisabled = false;
            private static bool isobj29IsEnabledDisabled = false;
            private static bool isobj30CommandDisabled = false;
            private static bool isobj30IsEnabledDisabled = false;
            private static bool isobj31ItemsSourceDisabled = false;
            private static bool isobj31IsDoubleTapEnabledDisabled = false;
            private static bool isobj32CommandDisabled = false;
            private static bool isobj33CommandDisabled = false;

            private DatabasePage_obj1_BindingsTracking bindingsTracking;

            public DatabasePage_obj1_Bindings()
            {
                this.bindingsTracking = new DatabasePage_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 269 && columnNumber == 91)
                {
                    isobj16IsOpenDisabled = true;
                }
                else if (lineNumber == 209 && columnNumber == 34)
                {
                    isobj17TextDisabled = true;
                }
                else if (lineNumber == 210 && columnNumber == 34)
                {
                    isobj17IsReadOnlyDisabled = true;
                }
                else if (lineNumber == 213 && columnNumber == 34)
                {
                    isobj18TextDisabled = true;
                }
                else if (lineNumber == 214 && columnNumber == 34)
                {
                    isobj18IsReadOnlyDisabled = true;
                }
                else if (lineNumber == 217 && columnNumber == 38)
                {
                    isobj19PasswordDisabled = true;
                }
                else if (lineNumber == 218 && columnNumber == 38)
                {
                    isobj19PasswordRevealModeDisabled = true;
                }
                else if (lineNumber == 219 && columnNumber == 38)
                {
                    isobj19AllowFocusOnInteractionDisabled = true;
                }
                else if (lineNumber == 252 && columnNumber == 41)
                {
                    isobj20VisibilityDisabled = true;
                }
                else if (lineNumber == 253 && columnNumber == 41)
                {
                    isobj20IsEnabledDisabled = true;
                }
                else if (lineNumber == 255 && columnNumber == 41)
                {
                    isobj20CommandDisabled = true;
                }
                else if (lineNumber == 261 && columnNumber == 47)
                {
                    isobj21IsEnabledDisabled = true;
                }
                else if (lineNumber == 262 && columnNumber == 47)
                {
                    isobj21IsCheckedDisabled = true;
                }
                else if (lineNumber == 234 && columnNumber == 41)
                {
                    isobj22CommandDisabled = true;
                }
                else if (lineNumber == 235 && columnNumber == 33)
                {
                    isobj22CommandParameterDisabled = true;
                }
                else if (lineNumber == 143 && columnNumber == 29)
                {
                    isobj24CommandDisabled = true;
                }
                else if (lineNumber == 149 && columnNumber == 29)
                {
                    isobj25CommandDisabled = true;
                }
                else if (lineNumber == 150 && columnNumber == 29)
                {
                    isobj25IsEnabledDisabled = true;
                }
                else if (lineNumber == 156 && columnNumber == 29)
                {
                    isobj26CommandDisabled = true;
                }
                else if (lineNumber == 157 && columnNumber == 29)
                {
                    isobj26IsEnabledDisabled = true;
                }
                else if (lineNumber == 163 && columnNumber == 29)
                {
                    isobj27CommandDisabled = true;
                }
                else if (lineNumber == 164 && columnNumber == 29)
                {
                    isobj27IsEnabledDisabled = true;
                }
                else if (lineNumber == 169 && columnNumber == 29)
                {
                    isobj28CommandDisabled = true;
                }
                else if (lineNumber == 170 && columnNumber == 29)
                {
                    isobj28IsEnabledDisabled = true;
                }
                else if (lineNumber == 175 && columnNumber == 29)
                {
                    isobj29CommandDisabled = true;
                }
                else if (lineNumber == 176 && columnNumber == 29)
                {
                    isobj29IsEnabledDisabled = true;
                }
                else if (lineNumber == 181 && columnNumber == 29)
                {
                    isobj30CommandDisabled = true;
                }
                else if (lineNumber == 182 && columnNumber == 29)
                {
                    isobj30IsEnabledDisabled = true;
                }
                else if (lineNumber == 118 && columnNumber == 27)
                {
                    isobj31ItemsSourceDisabled = true;
                }
                else if (lineNumber == 120 && columnNumber == 27)
                {
                    isobj31IsDoubleTapEnabledDisabled = true;
                }
                else if (lineNumber == 129 && columnNumber == 55)
                {
                    isobj32CommandDisabled = true;
                }
                else if (lineNumber == 126 && columnNumber == 55)
                {
                    isobj33CommandDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 16: // Views\DatabasePage.xaml line 269
                        this.obj16 = (global::Microsoft.UI.Xaml.Controls.InfoBar)target;
                        break;
                    case 17: // Views\DatabasePage.xaml line 208
                        this.obj17 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_17(this.obj17);
                        break;
                    case 18: // Views\DatabasePage.xaml line 212
                        this.obj18 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_18(this.obj18);
                        break;
                    case 19: // Views\DatabasePage.xaml line 216
                        this.obj19 = (global::Windows.UI.Xaml.Controls.PasswordBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_19(this.obj19);
                        break;
                    case 20: // Views\DatabasePage.xaml line 251
                        this.obj20 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 21: // Views\DatabasePage.xaml line 259
                        this.obj21 = (global::Windows.UI.Xaml.Controls.Primitives.ToggleButton)target;
                        break;
                    case 22: // Views\DatabasePage.xaml line 234
                        this.obj22 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 24: // Views\DatabasePage.xaml line 142
                        this.obj24 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 25: // Views\DatabasePage.xaml line 148
                        this.obj25 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 26: // Views\DatabasePage.xaml line 155
                        this.obj26 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 27: // Views\DatabasePage.xaml line 162
                        this.obj27 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 28: // Views\DatabasePage.xaml line 169
                        this.obj28 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 29: // Views\DatabasePage.xaml line 175
                        this.obj29 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 30: // Views\DatabasePage.xaml line 181
                        this.obj30 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 31: // Views\DatabasePage.xaml line 118
                        this.obj31 = (global::Windows.UI.Xaml.Controls.TreeView)target;
                        break;
                    case 32: // Views\DatabasePage.xaml line 129
                        this.obj32 = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)target;
                        break;
                    case 33: // Views\DatabasePage.xaml line 126
                        this.obj33 = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)target;
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IDatabasePage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::PasswordMgr_UWP.Views.DatabasePage)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::PasswordMgr_UWP.Views.DatabasePage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                        this.Update_editBtn(obj.editBtn, phase);
                        this.Update_showBtn(obj.showBtn, phase);
                        this.Update_password(obj.password, phase);
                        this.Update_key(obj.key, phase);
                    }
                }
                else
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.UpdateFallback_ViewModel(phase);
                    }
                }
            }
            private void Update_ViewModel(global::PasswordMgr_UWP.ViewModels.DatabaseViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_InfosChangedBarVisibility(obj.InfosChangedBarVisibility, phase);
                        this.Update_ViewModel_Name(obj.Name, phase);
                        this.Update_ViewModel_Info(obj.Info, phase);
                        this.Update_ViewModel_PlaintextPassword(obj.PlaintextPassword, phase);
                        this.Update_ViewModel_Selected(obj.Selected, phase);
                        this.Update_ViewModel_SaveCommand(obj.SaveCommand, phase);
                        this.Update_ViewModel_EditChecked(obj.EditChecked, phase);
                        this.Update_ViewModel_CopyCommand(obj.CopyCommand, phase);
                        this.Update_ViewModel_NewDatabaseCommand(obj.NewDatabaseCommand, phase);
                        this.Update_ViewModel_NewPasswordCommand(obj.NewPasswordCommand, phase);
                        this.Update_ViewModel_DecryptDatabaseCommand(obj.DecryptDatabaseCommand, phase);
                        this.Update_ViewModel_EncryptButtonCommand(obj.EncryptButtonCommand, phase);
                        this.Update_ViewModel_DeleteCommand(obj.DeleteCommand, phase);
                        this.Update_ViewModel_ExportDatabaseCommand(obj.ExportDatabaseCommand, phase);
                        this.Update_ViewModel_SelectedIsDatabase(obj.SelectedIsDatabase, phase);
                        this.Update_ViewModel_ExportAllDatabasesCommand(obj.ExportAllDatabasesCommand, phase);
                        this.Update_ViewModel_ListIsNotEmpty(obj.ListIsNotEmpty, phase);
                        this.Update_ViewModel_Databases(obj.Databases, phase);
                        this.Update_ViewModel_SetSelectedCommand(obj.SetSelectedCommand, phase);
                    }
                }
                else
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.UpdateFallback_ViewModel_Selected(phase);
                    }
                }
            }
            private void Update_ViewModel_InfosChangedBarVisibility(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 269
                    if (!isobj16IsOpenDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_InfoBar_IsOpen(this.obj16, obj);
                    }
                }
            }
            private void Update_ViewModel_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 208
                    if (!isobj17TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj17, obj, null);
                    }
                }
            }
            private void Update_editBtn(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_editBtn(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_editBtn_IsChecked(obj.IsChecked, phase);
                    }
                }
            }
            private void Update_editBtn_IsChecked(global::System.Nullable<global::System.Boolean> obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_editBtn_IsChecked_Cast_IsChecked_To_Boolean((global::System.Boolean)obj, phase);
                        this.Update_editBtn_IsChecked_Cast_IsChecked_To_Visibility((obj ?? false) ? global::Windows.UI.Xaml.Visibility.Visible : global::Windows.UI.Xaml.Visibility.Collapsed, phase);
                    }
                }
            }
            private void Update_editBtn_IsChecked_Cast_IsChecked_To_Boolean(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 208
                    if (!isobj17IsReadOnlyDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_IsReadOnly(this.obj17, (global::System.Boolean)this.LookupConverter("InverseBoolConverter").Convert(obj, typeof(global::System.Boolean), null, null));
                    }
                    // Views\DatabasePage.xaml line 212
                    if (!isobj18IsReadOnlyDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_IsReadOnly(this.obj18, (global::System.Boolean)this.LookupConverter("InverseBoolConverter").Convert(obj, typeof(global::System.Boolean), null, null));
                    }
                    // Views\DatabasePage.xaml line 216
                    if (!isobj19AllowFocusOnInteractionDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_FrameworkElement_AllowFocusOnInteraction(this.obj19, obj);
                    }
                }
            }
            private void Update_ViewModel_Info(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 212
                    if (!isobj18TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj18, obj, null);
                    }
                }
            }
            private void Update_ViewModel_PlaintextPassword(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 216
                    if (!isobj19PasswordDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_PasswordBox_Password(this.obj19, obj, null);
                    }
                }
            }
            private void Update_showBtn(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_showBtn(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_showBtn_IsChecked(obj.IsChecked, phase);
                    }
                }
            }
            private void Update_showBtn_IsChecked(global::System.Nullable<global::System.Boolean> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 216
                    if (!isobj19PasswordRevealModeDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_PasswordBox_PasswordRevealMode(this.obj19, (global::Windows.UI.Xaml.Controls.PasswordRevealMode)this.LookupConverter("BoolToPasswordRevealModeConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Controls.PasswordRevealMode), null, null));
                    }
                }
            }
            private void Update_editBtn_IsChecked_Cast_IsChecked_To_Visibility(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 251
                    if (!isobj20VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj20, obj);
                    }
                }
            }
            private void Update_ViewModel_Selected(global::PasswordMgr_UWP.Core.Models.IPasswordInformation obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Selected_IsDecrypted(obj.IsDecrypted, phase);
                        this.Update_ViewModel_Selected_IsDecryptButtonEnabled(obj.IsDecryptButtonEnabled, phase);
                    }
                }
                else
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.UpdateFallback_ViewModel_Selected_IsDecrypted(phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.UpdateFallback_ViewModel_Selected_IsDecryptButtonEnabled(phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 148
                    if (!isobj25IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj25, (global::System.Boolean)this.LookupConverter("CheckForDecryptedDatabaseConverter").Convert(obj, typeof(global::System.Boolean), null, null));
                    }
                    // Views\DatabasePage.xaml line 169
                    if (!isobj28IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj28, (global::System.Boolean)this.LookupConverter("CheckForValueConverter").Convert(obj, typeof(global::System.Boolean), null, null));
                    }
                }
            }
            private void Update_ViewModel_Selected_IsDecrypted(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 251
                    if (!isobj20IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj20, obj);
                    }
                    // Views\DatabasePage.xaml line 259
                    if (!isobj21IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj21, obj);
                    }
                }
            }
            private void Update_ViewModel_SaveCommand(global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_SaveCommand(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 251
                    if (!isobj20CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj20, obj, null);
                    }
                }
            }
            private void Update_ViewModel_EditChecked(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 259
                    if (!isobj21IsCheckedDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj21, obj, null);
                    }
                }
            }
            private void Update_ViewModel_CopyCommand(global::Microsoft.Toolkit.Mvvm.Input.RelayCommand<global::System.String> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 234
                    if (!isobj22CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj22, obj, null);
                    }
                }
            }
            private void Update_password(global::Windows.UI.Xaml.Controls.PasswordBox obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_password(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_password_Password(obj.Password, phase);
                    }
                }
            }
            private void Update_password_Password(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 234
                    if (!isobj22CommandParameterDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_CommandParameter(this.obj22, obj, null);
                    }
                }
            }
            private void Update_ViewModel_NewDatabaseCommand(global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_NewDatabaseCommand(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 142
                    if (!isobj24CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj24, obj, null);
                    }
                }
            }
            private void Update_ViewModel_NewPasswordCommand(global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_NewPasswordCommand(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 148
                    if (!isobj25CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj25, obj, null);
                    }
                }
            }
            private void Update_ViewModel_DecryptDatabaseCommand(global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_DecryptDatabaseCommand(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 155
                    if (!isobj26CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj26, obj, null);
                    }
                    // Views\DatabasePage.xaml line 129
                    if (!isobj32CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(this.obj32, obj, null);
                    }
                }
            }
            private void Update_ViewModel_Selected_IsDecryptButtonEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 155
                    if (!isobj26IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj26, obj);
                    }
                }
            }
            private void Update_ViewModel_EncryptButtonCommand(global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_EncryptButtonCommand(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 162
                    if (!isobj27CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj27, obj, null);
                    }
                }
            }
            private void Update_key(global::Windows.UI.Xaml.Controls.Button obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_key(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_key_IsEnabled(obj.IsEnabled, phase);
                    }
                }
            }
            private void Update_key_IsEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 162
                    if (!isobj27IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj27, obj);
                    }
                }
            }
            private void Update_ViewModel_DeleteCommand(global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_DeleteCommand(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 169
                    if (!isobj28CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj28, obj, null);
                    }
                }
            }
            private void Update_ViewModel_ExportDatabaseCommand(global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_ExportDatabaseCommand(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 175
                    if (!isobj29CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj29, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SelectedIsDatabase(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 175
                    if (!isobj29IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj29, obj);
                    }
                    // Views\DatabasePage.xaml line 118
                    if (!isobj31IsDoubleTapEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_IsDoubleTapEnabled(this.obj31, obj);
                    }
                }
            }
            private void Update_ViewModel_ExportAllDatabasesCommand(global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_ExportAllDatabasesCommand(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 181
                    if (!isobj30CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj30, obj, null);
                    }
                }
            }
            private void Update_ViewModel_ListIsNotEmpty(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 181
                    if (!isobj30IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj30, obj);
                    }
                }
            }
            private void Update_ViewModel_Databases(global::System.Collections.ObjectModel.ObservableCollection<global::PasswordMgr_UWP.Core.Models.EncryptedDatabase> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_Databases(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 118
                    if (!isobj31ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TreeView_ItemsSource(this.obj31, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SetSelectedCommand(global::Microsoft.Toolkit.Mvvm.Input.RelayCommand<global::System.Object> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 126
                    if (!isobj33CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(this.obj33, obj, null);
                    }
                }
            }

            private void UpdateFallback_ViewModel(int phase)
            {
                this.UpdateFallback_ViewModel_Selected(phase);
            }

            private void UpdateFallback_ViewModel_Selected(int phase)
            {
                this.UpdateFallback_ViewModel_Selected_IsDecrypted(phase);
                this.UpdateFallback_ViewModel_Selected_IsDecryptButtonEnabled(phase);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 148
                    if (!isobj25IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj25, (global::System.Boolean) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Boolean), "false"));
                    }
                }
            }

            private void UpdateFallback_ViewModel_Selected_IsDecrypted(int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 251
                    if (!isobj20IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj20, (global::System.Boolean) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Boolean), "false"));
                    }
                    // Views\DatabasePage.xaml line 259
                    if (!isobj21IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj21, (global::System.Boolean) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Boolean), "false"));
                    }
                }
            }

            private void UpdateFallback_ViewModel_Selected_IsDecryptButtonEnabled(int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DatabasePage.xaml line 155
                    if (!isobj26IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj26, (global::System.Boolean) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Boolean), "false"));
                    }
                }
            }
            private void UpdateTwoWay_17_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.Name = this.obj17.Text;
                        }
                    }
                }
            }
            private void UpdateTwoWay_18_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.Info = this.obj18.Text;
                        }
                    }
                }
            }
            private void UpdateTwoWay_19_Password()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.PlaintextPassword = this.obj19.Password;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class DatabasePage_obj1_BindingsTracking
            {
                private global::System.WeakReference<DatabasePage_obj1_Bindings> weakRefToBindingObj; 

                public DatabasePage_obj1_BindingsTracking(DatabasePage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<DatabasePage_obj1_Bindings>(obj);
                }

                public DatabasePage_obj1_Bindings TryGetBindingObject()
                {
                    DatabasePage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                    UpdateChildListeners_editBtn(null);
                    UpdateChildListeners_showBtn(null);
                    UpdateChildListeners_ViewModel_SaveCommand(null);
                    UpdateChildListeners_password(null);
                    UpdateChildListeners_ViewModel_NewDatabaseCommand(null);
                    UpdateChildListeners_ViewModel_NewPasswordCommand(null);
                    UpdateChildListeners_ViewModel_DecryptDatabaseCommand(null);
                    UpdateChildListeners_ViewModel_EncryptButtonCommand(null);
                    UpdateChildListeners_key(null);
                    UpdateChildListeners_ViewModel_DeleteCommand(null);
                    UpdateChildListeners_ViewModel_ExportDatabaseCommand(null);
                    UpdateChildListeners_ViewModel_ExportAllDatabasesCommand(null);
                    UpdateChildListeners_ViewModel_Databases(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DatabasePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::PasswordMgr_UWP.ViewModels.DatabaseViewModel obj = sender as global::PasswordMgr_UWP.ViewModels.DatabaseViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_InfosChangedBarVisibility(obj.InfosChangedBarVisibility, DATA_CHANGED);
                                bindings.Update_ViewModel_Name(obj.Name, DATA_CHANGED);
                                bindings.Update_ViewModel_Info(obj.Info, DATA_CHANGED);
                                bindings.Update_ViewModel_PlaintextPassword(obj.PlaintextPassword, DATA_CHANGED);
                                bindings.Update_ViewModel_Selected(obj.Selected, DATA_CHANGED);
                                bindings.Update_ViewModel_SaveCommand(obj.SaveCommand, DATA_CHANGED);
                                bindings.Update_ViewModel_EditChecked(obj.EditChecked, DATA_CHANGED);
                                bindings.Update_ViewModel_CopyCommand(obj.CopyCommand, DATA_CHANGED);
                                bindings.Update_ViewModel_NewDatabaseCommand(obj.NewDatabaseCommand, DATA_CHANGED);
                                bindings.Update_ViewModel_NewPasswordCommand(obj.NewPasswordCommand, DATA_CHANGED);
                                bindings.Update_ViewModel_DecryptDatabaseCommand(obj.DecryptDatabaseCommand, DATA_CHANGED);
                                bindings.Update_ViewModel_EncryptButtonCommand(obj.EncryptButtonCommand, DATA_CHANGED);
                                bindings.Update_ViewModel_DeleteCommand(obj.DeleteCommand, DATA_CHANGED);
                                bindings.Update_ViewModel_ExportDatabaseCommand(obj.ExportDatabaseCommand, DATA_CHANGED);
                                bindings.Update_ViewModel_SelectedIsDatabase(obj.SelectedIsDatabase, DATA_CHANGED);
                                bindings.Update_ViewModel_ExportAllDatabasesCommand(obj.ExportAllDatabasesCommand, DATA_CHANGED);
                                bindings.Update_ViewModel_ListIsNotEmpty(obj.ListIsNotEmpty, DATA_CHANGED);
                                bindings.Update_ViewModel_Databases(obj.Databases, DATA_CHANGED);
                                bindings.Update_ViewModel_SetSelectedCommand(obj.SetSelectedCommand, DATA_CHANGED);
                            }
                            else
                            {
                                bindings.UpdateFallback_ViewModel_Selected(DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "InfosChangedBarVisibility":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_InfosChangedBarVisibility(obj.InfosChangedBarVisibility, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Name":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Name(obj.Name, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Info":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Info(obj.Info, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PlaintextPassword":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_PlaintextPassword(obj.PlaintextPassword, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Selected":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Selected(obj.Selected, DATA_CHANGED);
                                    }
                                    else
                                    {
                                        bindings.UpdateFallback_ViewModel_Selected(DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SaveCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SaveCommand(obj.SaveCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EditChecked":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_EditChecked(obj.EditChecked, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CopyCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CopyCommand(obj.CopyCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "NewDatabaseCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_NewDatabaseCommand(obj.NewDatabaseCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "NewPasswordCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_NewPasswordCommand(obj.NewPasswordCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "DecryptDatabaseCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_DecryptDatabaseCommand(obj.DecryptDatabaseCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EncryptButtonCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_EncryptButtonCommand(obj.EncryptButtonCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "DeleteCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_DeleteCommand(obj.DeleteCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ExportDatabaseCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ExportDatabaseCommand(obj.ExportDatabaseCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedIsDatabase":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SelectedIsDatabase(obj.SelectedIsDatabase, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ExportAllDatabasesCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ExportAllDatabasesCommand(obj.ExportAllDatabasesCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ListIsNotEmpty":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ListIsNotEmpty(obj.ListIsNotEmpty, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Databases":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Databases(obj.Databases, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SetSelectedCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SetSelectedCommand(obj.SetSelectedCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::PasswordMgr_UWP.ViewModels.DatabaseViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::PasswordMgr_UWP.ViewModels.DatabaseViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void DependencyPropertyChanged_editBtn_IsChecked(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    DatabasePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Windows.UI.Xaml.Controls.Primitives.ToggleButton obj = sender as global::Windows.UI.Xaml.Controls.Primitives.ToggleButton;
                        if (obj != null)
                        {
                            bindings.Update_editBtn_IsChecked(obj.IsChecked, DATA_CHANGED);
                        }
                    }
                }
                private global::Windows.UI.Xaml.Controls.Primitives.ToggleButton cache_editBtn = null;
                private long tokenDPC_editBtn_IsChecked = 0;
                public void UpdateChildListeners_editBtn(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton obj)
                {
                    if (obj != cache_editBtn)
                    {
                        if (cache_editBtn != null)
                        {
                            cache_editBtn.UnregisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, tokenDPC_editBtn_IsChecked);
                            cache_editBtn = null;
                        }
                        if (obj != null)
                        {
                            cache_editBtn = obj;
                            tokenDPC_editBtn_IsChecked = obj.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, DependencyPropertyChanged_editBtn_IsChecked);
                        }
                    }
                }
                public void DependencyPropertyChanged_showBtn_IsChecked(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    DatabasePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Windows.UI.Xaml.Controls.Primitives.ToggleButton obj = sender as global::Windows.UI.Xaml.Controls.Primitives.ToggleButton;
                        if (obj != null)
                        {
                            bindings.Update_showBtn_IsChecked(obj.IsChecked, DATA_CHANGED);
                        }
                    }
                }
                private global::Windows.UI.Xaml.Controls.Primitives.ToggleButton cache_showBtn = null;
                private long tokenDPC_showBtn_IsChecked = 0;
                public void UpdateChildListeners_showBtn(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton obj)
                {
                    if (obj != cache_showBtn)
                    {
                        if (cache_showBtn != null)
                        {
                            cache_showBtn.UnregisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, tokenDPC_showBtn_IsChecked);
                            cache_showBtn = null;
                        }
                        if (obj != null)
                        {
                            cache_showBtn = obj;
                            tokenDPC_showBtn_IsChecked = obj.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, DependencyPropertyChanged_showBtn_IsChecked);
                        }
                    }
                }
                public void PropertyChanged_ViewModel_SaveCommand(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DatabasePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand obj = sender as global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand cache_ViewModel_SaveCommand = null;
                public void UpdateChildListeners_ViewModel_SaveCommand(global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand obj)
                {
                    if (obj != cache_ViewModel_SaveCommand)
                    {
                        if (cache_ViewModel_SaveCommand != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_SaveCommand).PropertyChanged -= PropertyChanged_ViewModel_SaveCommand;
                            cache_ViewModel_SaveCommand = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_SaveCommand = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_SaveCommand;
                        }
                    }
                }
                public void DependencyPropertyChanged_password_Password(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    DatabasePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Windows.UI.Xaml.Controls.PasswordBox obj = sender as global::Windows.UI.Xaml.Controls.PasswordBox;
                        if (obj != null)
                        {
                            bindings.Update_password_Password(obj.Password, DATA_CHANGED);
                        }
                    }
                }
                private global::Windows.UI.Xaml.Controls.PasswordBox cache_password = null;
                private long tokenDPC_password_Password = 0;
                public void UpdateChildListeners_password(global::Windows.UI.Xaml.Controls.PasswordBox obj)
                {
                    if (obj != cache_password)
                    {
                        if (cache_password != null)
                        {
                            cache_password.UnregisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.PasswordBox.PasswordProperty, tokenDPC_password_Password);
                            cache_password = null;
                        }
                        if (obj != null)
                        {
                            cache_password = obj;
                            tokenDPC_password_Password = obj.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.PasswordBox.PasswordProperty, DependencyPropertyChanged_password_Password);
                        }
                    }
                }
                public void PropertyChanged_ViewModel_NewDatabaseCommand(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DatabasePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand obj = sender as global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand cache_ViewModel_NewDatabaseCommand = null;
                public void UpdateChildListeners_ViewModel_NewDatabaseCommand(global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand obj)
                {
                    if (obj != cache_ViewModel_NewDatabaseCommand)
                    {
                        if (cache_ViewModel_NewDatabaseCommand != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_NewDatabaseCommand).PropertyChanged -= PropertyChanged_ViewModel_NewDatabaseCommand;
                            cache_ViewModel_NewDatabaseCommand = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_NewDatabaseCommand = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_NewDatabaseCommand;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_NewPasswordCommand(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DatabasePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand obj = sender as global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand cache_ViewModel_NewPasswordCommand = null;
                public void UpdateChildListeners_ViewModel_NewPasswordCommand(global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand obj)
                {
                    if (obj != cache_ViewModel_NewPasswordCommand)
                    {
                        if (cache_ViewModel_NewPasswordCommand != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_NewPasswordCommand).PropertyChanged -= PropertyChanged_ViewModel_NewPasswordCommand;
                            cache_ViewModel_NewPasswordCommand = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_NewPasswordCommand = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_NewPasswordCommand;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_DecryptDatabaseCommand(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DatabasePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand obj = sender as global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand cache_ViewModel_DecryptDatabaseCommand = null;
                public void UpdateChildListeners_ViewModel_DecryptDatabaseCommand(global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand obj)
                {
                    if (obj != cache_ViewModel_DecryptDatabaseCommand)
                    {
                        if (cache_ViewModel_DecryptDatabaseCommand != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_DecryptDatabaseCommand).PropertyChanged -= PropertyChanged_ViewModel_DecryptDatabaseCommand;
                            cache_ViewModel_DecryptDatabaseCommand = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_DecryptDatabaseCommand = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_DecryptDatabaseCommand;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_EncryptButtonCommand(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DatabasePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand obj = sender as global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand cache_ViewModel_EncryptButtonCommand = null;
                public void UpdateChildListeners_ViewModel_EncryptButtonCommand(global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand obj)
                {
                    if (obj != cache_ViewModel_EncryptButtonCommand)
                    {
                        if (cache_ViewModel_EncryptButtonCommand != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_EncryptButtonCommand).PropertyChanged -= PropertyChanged_ViewModel_EncryptButtonCommand;
                            cache_ViewModel_EncryptButtonCommand = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_EncryptButtonCommand = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_EncryptButtonCommand;
                        }
                    }
                }
                public void DependencyPropertyChanged_key_IsEnabled(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    DatabasePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Windows.UI.Xaml.Controls.Button obj = sender as global::Windows.UI.Xaml.Controls.Button;
                        if (obj != null)
                        {
                            bindings.Update_key_IsEnabled(obj.IsEnabled, DATA_CHANGED);
                        }
                    }
                }
                private global::Windows.UI.Xaml.Controls.Button cache_key = null;
                private long tokenDPC_key_IsEnabled = 0;
                public void UpdateChildListeners_key(global::Windows.UI.Xaml.Controls.Button obj)
                {
                    if (obj != cache_key)
                    {
                        if (cache_key != null)
                        {
                            cache_key.UnregisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Control.IsEnabledProperty, tokenDPC_key_IsEnabled);
                            cache_key = null;
                        }
                        if (obj != null)
                        {
                            cache_key = obj;
                            tokenDPC_key_IsEnabled = obj.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Control.IsEnabledProperty, DependencyPropertyChanged_key_IsEnabled);
                        }
                    }
                }
                public void PropertyChanged_ViewModel_DeleteCommand(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DatabasePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand obj = sender as global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand cache_ViewModel_DeleteCommand = null;
                public void UpdateChildListeners_ViewModel_DeleteCommand(global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand obj)
                {
                    if (obj != cache_ViewModel_DeleteCommand)
                    {
                        if (cache_ViewModel_DeleteCommand != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_DeleteCommand).PropertyChanged -= PropertyChanged_ViewModel_DeleteCommand;
                            cache_ViewModel_DeleteCommand = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_DeleteCommand = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_DeleteCommand;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_ExportDatabaseCommand(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DatabasePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand obj = sender as global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand cache_ViewModel_ExportDatabaseCommand = null;
                public void UpdateChildListeners_ViewModel_ExportDatabaseCommand(global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand obj)
                {
                    if (obj != cache_ViewModel_ExportDatabaseCommand)
                    {
                        if (cache_ViewModel_ExportDatabaseCommand != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_ExportDatabaseCommand).PropertyChanged -= PropertyChanged_ViewModel_ExportDatabaseCommand;
                            cache_ViewModel_ExportDatabaseCommand = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_ExportDatabaseCommand = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_ExportDatabaseCommand;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_ExportAllDatabasesCommand(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DatabasePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand obj = sender as global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand cache_ViewModel_ExportAllDatabasesCommand = null;
                public void UpdateChildListeners_ViewModel_ExportAllDatabasesCommand(global::Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand obj)
                {
                    if (obj != cache_ViewModel_ExportAllDatabasesCommand)
                    {
                        if (cache_ViewModel_ExportAllDatabasesCommand != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_ExportAllDatabasesCommand).PropertyChanged -= PropertyChanged_ViewModel_ExportAllDatabasesCommand;
                            cache_ViewModel_ExportAllDatabasesCommand = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_ExportAllDatabasesCommand = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_ExportAllDatabasesCommand;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_Databases(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DatabasePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::PasswordMgr_UWP.Core.Models.EncryptedDatabase> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::PasswordMgr_UWP.Core.Models.EncryptedDatabase>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_Databases(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    DatabasePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::PasswordMgr_UWP.Core.Models.EncryptedDatabase> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::PasswordMgr_UWP.Core.Models.EncryptedDatabase>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::PasswordMgr_UWP.Core.Models.EncryptedDatabase> cache_ViewModel_Databases = null;
                public void UpdateChildListeners_ViewModel_Databases(global::System.Collections.ObjectModel.ObservableCollection<global::PasswordMgr_UWP.Core.Models.EncryptedDatabase> obj)
                {
                    if (obj != cache_ViewModel_Databases)
                    {
                        if (cache_ViewModel_Databases != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_Databases).PropertyChanged -= PropertyChanged_ViewModel_Databases;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_Databases).CollectionChanged -= CollectionChanged_ViewModel_Databases;
                            cache_ViewModel_Databases = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_Databases = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_Databases;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_Databases;
                        }
                    }
                }
                public void RegisterTwoWayListener_17(global::Windows.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.LostFocus += (sender, e) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_17_Text();
                        }
                    };
                }
                public void RegisterTwoWayListener_18(global::Windows.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.LostFocus += (sender, e) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_18_Text();
                        }
                    };
                }
                public void RegisterTwoWayListener_19(global::Windows.UI.Xaml.Controls.PasswordBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.PasswordBox.PasswordProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_19_Password();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 1: // Views\DatabasePage.xaml line 1
                {
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)(target);
                    ((global::Windows.UI.Xaml.Controls.Page)element1).SizeChanged += this.Page_SizeChanged;
                }
                break;
            case 10: // Views\DatabasePage.xaml line 48
                {
                    this.ContentArea = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 11: // Views\DatabasePage.xaml line 61
                {
                    this.managerPageVisualGroup = (global::Windows.UI.Xaml.VisualStateGroup)(target);
                }
                break;
            case 12: // Views\DatabasePage.xaml line 62
                {
                    this.normalWindow = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 13: // Views\DatabasePage.xaml line 81
                {
                    this.smallWindow = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 14: // Views\DatabasePage.xaml line 103
                {
                    this.treeSpace = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 15: // Views\DatabasePage.xaml line 190
                {
                    this.dataSpace = (global::Windows.UI.Xaml.Controls.ScrollViewer)(target);
                }
                break;
            case 19: // Views\DatabasePage.xaml line 216
                {
                    this.password = (global::Windows.UI.Xaml.Controls.PasswordBox)(target);
                }
                break;
            case 21: // Views\DatabasePage.xaml line 259
                {
                    this.editBtn = (global::Windows.UI.Xaml.Controls.Primitives.ToggleButton)(target);
                }
                break;
            case 23: // Views\DatabasePage.xaml line 240
                {
                    this.showBtn = (global::Windows.UI.Xaml.Controls.Primitives.ToggleButton)(target);
                }
                break;
            case 25: // Views\DatabasePage.xaml line 148
                {
                    this.key = (global::Windows.UI.Xaml.Controls.Button)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\DatabasePage.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    DatabasePage_obj1_Bindings bindings = new DatabasePage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            case 3: // Views\DatabasePage.xaml line 35
                {                    
                    global::Windows.UI.Xaml.Controls.TreeViewItem element3 = (global::Windows.UI.Xaml.Controls.TreeViewItem)target;
                    DatabasePage_obj3_Bindings bindings = new DatabasePage_obj3_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element3.DataContext);
                    element3.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element3, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element3, bindings);
                }
                break;
            case 6: // Views\DatabasePage.xaml line 25
                {                    
                    global::Windows.UI.Xaml.Controls.TreeViewItem element6 = (global::Windows.UI.Xaml.Controls.TreeViewItem)target;
                    DatabasePage_obj6_Bindings bindings = new DatabasePage_obj6_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element6.DataContext);
                    element6.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element6, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element6, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

